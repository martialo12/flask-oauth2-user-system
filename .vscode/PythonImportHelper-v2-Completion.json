[
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "click",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "click",
        "description": "click",
        "detail": "click",
        "documentation": {}
    },
    {
        "label": "database_exists",
        "importPath": "sqlalchemy_utils",
        "description": "sqlalchemy_utils",
        "isExtraImport": true,
        "detail": "sqlalchemy_utils",
        "documentation": {}
    },
    {
        "label": "create_database",
        "importPath": "sqlalchemy_utils",
        "description": "sqlalchemy_utils",
        "isExtraImport": true,
        "detail": "sqlalchemy_utils",
        "documentation": {}
    },
    {
        "label": "create_app",
        "importPath": "oauth_user_system.app",
        "description": "oauth_user_system.app",
        "isExtraImport": true,
        "detail": "oauth_user_system.app",
        "documentation": {}
    },
    {
        "label": "create_celery_app",
        "importPath": "oauth_user_system.app",
        "description": "oauth_user_system.app",
        "isExtraImport": true,
        "detail": "oauth_user_system.app",
        "documentation": {}
    },
    {
        "label": "create_celery_app",
        "importPath": "oauth_user_system.app",
        "description": "oauth_user_system.app",
        "isExtraImport": true,
        "detail": "oauth_user_system.app",
        "documentation": {}
    },
    {
        "label": "create_app",
        "importPath": "oauth_user_system.app",
        "description": "oauth_user_system.app",
        "isExtraImport": true,
        "detail": "oauth_user_system.app",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "oauth_user_system.extensions",
        "description": "oauth_user_system.extensions",
        "isExtraImport": true,
        "detail": "oauth_user_system.extensions",
        "documentation": {}
    },
    {
        "label": "mail",
        "importPath": "oauth_user_system.extensions",
        "description": "oauth_user_system.extensions",
        "isExtraImport": true,
        "detail": "oauth_user_system.extensions",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "oauth_user_system.extensions",
        "description": "oauth_user_system.extensions",
        "isExtraImport": true,
        "detail": "oauth_user_system.extensions",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "oauth_user_system.extensions",
        "description": "oauth_user_system.extensions",
        "isExtraImport": true,
        "detail": "oauth_user_system.extensions",
        "documentation": {}
    },
    {
        "label": "mail",
        "importPath": "oauth_user_system.extensions",
        "description": "oauth_user_system.extensions",
        "isExtraImport": true,
        "detail": "oauth_user_system.extensions",
        "documentation": {}
    },
    {
        "label": "mail",
        "importPath": "oauth_user_system.extensions",
        "description": "oauth_user_system.extensions",
        "isExtraImport": true,
        "detail": "oauth_user_system.extensions",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "oauth_user_system.extensions",
        "description": "oauth_user_system.extensions",
        "isExtraImport": true,
        "detail": "oauth_user_system.extensions",
        "documentation": {}
    },
    {
        "label": "debug_toolbar",
        "importPath": "oauth_user_system.extensions",
        "description": "oauth_user_system.extensions",
        "isExtraImport": true,
        "detail": "oauth_user_system.extensions",
        "documentation": {}
    },
    {
        "label": "mail",
        "importPath": "oauth_user_system.extensions",
        "description": "oauth_user_system.extensions",
        "isExtraImport": true,
        "detail": "oauth_user_system.extensions",
        "documentation": {}
    },
    {
        "label": "csrf",
        "importPath": "oauth_user_system.extensions",
        "description": "oauth_user_system.extensions",
        "isExtraImport": true,
        "detail": "oauth_user_system.extensions",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "oauth_user_system.extensions",
        "description": "oauth_user_system.extensions",
        "isExtraImport": true,
        "detail": "oauth_user_system.extensions",
        "documentation": {}
    },
    {
        "label": "login_manager",
        "importPath": "oauth_user_system.extensions",
        "description": "oauth_user_system.extensions",
        "isExtraImport": true,
        "detail": "oauth_user_system.extensions",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "oauth_user_system.blueprints.user.models",
        "description": "oauth_user_system.blueprints.user.models",
        "isExtraImport": true,
        "detail": "oauth_user_system.blueprints.user.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "oauth_user_system.blueprints.user.models",
        "description": "oauth_user_system.blueprints.user.models",
        "isExtraImport": true,
        "detail": "oauth_user_system.blueprints.user.models",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "oauth_user_system.blueprints.user.models",
        "description": "oauth_user_system.blueprints.user.models",
        "isExtraImport": true,
        "detail": "oauth_user_system.blueprints.user.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "oauth_user_system.blueprints.user.models",
        "description": "oauth_user_system.blueprints.user.models",
        "isExtraImport": true,
        "detail": "oauth_user_system.blueprints.user.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "oauth_user_system.blueprints.user.models",
        "description": "oauth_user_system.blueprints.user.models",
        "isExtraImport": true,
        "detail": "oauth_user_system.blueprints.user.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "oauth_user_system.blueprints.user.models",
        "description": "oauth_user_system.blueprints.user.models",
        "isExtraImport": true,
        "detail": "oauth_user_system.blueprints.user.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "oauth_user_system.blueprints.user.models",
        "description": "oauth_user_system.blueprints.user.models",
        "isExtraImport": true,
        "detail": "oauth_user_system.blueprints.user.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "oauth_user_system.blueprints.user.models",
        "description": "oauth_user_system.blueprints.user.models",
        "isExtraImport": true,
        "detail": "oauth_user_system.blueprints.user.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "oauth_user_system.blueprints.user.models",
        "description": "oauth_user_system.blueprints.user.models",
        "isExtraImport": true,
        "detail": "oauth_user_system.blueprints.user.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "oauth_user_system.blueprints.user.models",
        "description": "oauth_user_system.blueprints.user.models",
        "isExtraImport": true,
        "detail": "oauth_user_system.blueprints.user.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "oauth_user_system.blueprints.user.models",
        "description": "oauth_user_system.blueprints.user.models",
        "isExtraImport": true,
        "detail": "oauth_user_system.blueprints.user.models",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "flash",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "flash",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "current_app",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "flash",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "pytz",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytz",
        "description": "pytz",
        "detail": "pytz",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "TypeDecorator",
        "importPath": "sqlalchemy.types",
        "description": "sqlalchemy.types",
        "isExtraImport": true,
        "detail": "sqlalchemy.types",
        "documentation": {}
    },
    {
        "label": "tzware_datetime",
        "importPath": "lib.util_datetime",
        "description": "lib.util_datetime",
        "isExtraImport": true,
        "detail": "lib.util_datetime",
        "documentation": {}
    },
    {
        "label": "Form",
        "importPath": "flask_wtf",
        "description": "flask_wtf",
        "isExtraImport": true,
        "detail": "flask_wtf",
        "documentation": {}
    },
    {
        "label": "Form",
        "importPath": "flask_wtf",
        "description": "flask_wtf",
        "isExtraImport": true,
        "detail": "flask_wtf",
        "documentation": {}
    },
    {
        "label": "Form",
        "importPath": "flask_wtf",
        "description": "flask_wtf",
        "isExtraImport": true,
        "detail": "flask_wtf",
        "documentation": {}
    },
    {
        "label": "CSRFProtect",
        "importPath": "flask_wtf",
        "description": "flask_wtf",
        "isExtraImport": true,
        "detail": "flask_wtf",
        "documentation": {}
    },
    {
        "label": "TextAreaField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "HiddenField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "StringField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "PasswordField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "EmailField",
        "importPath": "wtforms_components",
        "description": "wtforms_components",
        "isExtraImport": true,
        "detail": "wtforms_components",
        "documentation": {}
    },
    {
        "label": "EmailField",
        "importPath": "wtforms_components",
        "description": "wtforms_components",
        "isExtraImport": true,
        "detail": "wtforms_components",
        "documentation": {}
    },
    {
        "label": "Email",
        "importPath": "wtforms_components",
        "description": "wtforms_components",
        "isExtraImport": true,
        "detail": "wtforms_components",
        "documentation": {}
    },
    {
        "label": "Unique",
        "importPath": "wtforms_components",
        "description": "wtforms_components",
        "isExtraImport": true,
        "detail": "wtforms_components",
        "documentation": {}
    },
    {
        "label": "DataRequired",
        "importPath": "wtforms.validators",
        "description": "wtforms.validators",
        "isExtraImport": true,
        "detail": "wtforms.validators",
        "documentation": {}
    },
    {
        "label": "Length",
        "importPath": "wtforms.validators",
        "description": "wtforms.validators",
        "isExtraImport": true,
        "detail": "wtforms.validators",
        "documentation": {}
    },
    {
        "label": "DataRequired",
        "importPath": "wtforms.validators",
        "description": "wtforms.validators",
        "isExtraImport": true,
        "detail": "wtforms.validators",
        "documentation": {}
    },
    {
        "label": "Length",
        "importPath": "wtforms.validators",
        "description": "wtforms.validators",
        "isExtraImport": true,
        "detail": "wtforms.validators",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "wtforms.validators",
        "description": "wtforms.validators",
        "isExtraImport": true,
        "detail": "wtforms.validators",
        "documentation": {}
    },
    {
        "label": "Regexp",
        "importPath": "wtforms.validators",
        "description": "wtforms.validators",
        "isExtraImport": true,
        "detail": "wtforms.validators",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "wtforms.validators",
        "description": "wtforms.validators",
        "isExtraImport": true,
        "detail": "wtforms.validators",
        "documentation": {}
    },
    {
        "label": "send_template_message",
        "importPath": "lib.flask_mailplus",
        "description": "lib.flask_mailplus",
        "isExtraImport": true,
        "detail": "lib.flask_mailplus",
        "documentation": {}
    },
    {
        "label": "send_template_message",
        "importPath": "lib.flask_mailplus",
        "description": "lib.flask_mailplus",
        "isExtraImport": true,
        "detail": "lib.flask_mailplus",
        "documentation": {}
    },
    {
        "label": "current_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "current_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "UserMixin",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "login_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "current_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "logout_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "LoginManager",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "ContactForm",
        "importPath": "oauth_user_system.blueprints.contact.forms",
        "description": "oauth_user_system.blueprints.contact.forms",
        "isExtraImport": true,
        "detail": "oauth_user_system.blueprints.contact.forms",
        "documentation": {}
    },
    {
        "label": "wraps",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "ModelForm",
        "importPath": "lib.util_wtforms",
        "description": "lib.util_wtforms",
        "isExtraImport": true,
        "detail": "lib.util_wtforms",
        "documentation": {}
    },
    {
        "label": "ensure_identity_exists",
        "importPath": "oauth_user_system.blueprints.user.validations",
        "description": "oauth_user_system.blueprints.user.validations",
        "isExtraImport": true,
        "detail": "oauth_user_system.blueprints.user.validations",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "oauth_user_system.blueprints.user.validations",
        "description": "oauth_user_system.blueprints.user.validations",
        "isExtraImport": true,
        "detail": "oauth_user_system.blueprints.user.validations",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "md5",
        "importPath": "hashlib",
        "description": "hashlib",
        "isExtraImport": true,
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "generate_password_hash",
        "importPath": "werkzeug.security",
        "description": "werkzeug.security",
        "isExtraImport": true,
        "detail": "werkzeug.security",
        "documentation": {}
    },
    {
        "label": "check_password_hash",
        "importPath": "werkzeug.security",
        "description": "werkzeug.security",
        "isExtraImport": true,
        "detail": "werkzeug.security",
        "documentation": {}
    },
    {
        "label": "URLSafeTimedSerializer",
        "importPath": "itsdangerous",
        "description": "itsdangerous",
        "isExtraImport": true,
        "detail": "itsdangerous",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "itsdangerous",
        "description": "itsdangerous",
        "isExtraImport": true,
        "detail": "itsdangerous",
        "documentation": {}
    },
    {
        "label": "URLSafeTimedSerializer",
        "importPath": "itsdangerous",
        "description": "itsdangerous",
        "isExtraImport": true,
        "detail": "itsdangerous",
        "documentation": {}
    },
    {
        "label": "ResourceMixin",
        "importPath": "lib.util_sqlalchemy",
        "description": "lib.util_sqlalchemy",
        "isExtraImport": true,
        "detail": "lib.util_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "AwareDateTime",
        "importPath": "lib.util_sqlalchemy",
        "description": "lib.util_sqlalchemy",
        "isExtraImport": true,
        "detail": "lib.util_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "safe_next_url",
        "importPath": "lib.safe_next_url",
        "description": "lib.safe_next_url",
        "isExtraImport": true,
        "detail": "lib.safe_next_url",
        "documentation": {}
    },
    {
        "label": "anonymous_required",
        "importPath": "oauth_user_system.blueprints.user.decorators",
        "description": "oauth_user_system.blueprints.user.decorators",
        "isExtraImport": true,
        "detail": "oauth_user_system.blueprints.user.decorators",
        "documentation": {}
    },
    {
        "label": "LoginForm",
        "importPath": "oauth_user_system.blueprints.user.forms",
        "description": "oauth_user_system.blueprints.user.forms",
        "isExtraImport": true,
        "detail": "oauth_user_system.blueprints.user.forms",
        "documentation": {}
    },
    {
        "label": "BeginPasswordResetForm",
        "importPath": "oauth_user_system.blueprints.user.forms",
        "description": "oauth_user_system.blueprints.user.forms",
        "isExtraImport": true,
        "detail": "oauth_user_system.blueprints.user.forms",
        "documentation": {}
    },
    {
        "label": "PasswordResetForm",
        "importPath": "oauth_user_system.blueprints.user.forms",
        "description": "oauth_user_system.blueprints.user.forms",
        "isExtraImport": true,
        "detail": "oauth_user_system.blueprints.user.forms",
        "documentation": {}
    },
    {
        "label": "SignupForm",
        "importPath": "oauth_user_system.blueprints.user.forms",
        "description": "oauth_user_system.blueprints.user.forms",
        "isExtraImport": true,
        "detail": "oauth_user_system.blueprints.user.forms",
        "documentation": {}
    },
    {
        "label": "WelcomeForm",
        "importPath": "oauth_user_system.blueprints.user.forms",
        "description": "oauth_user_system.blueprints.user.forms",
        "isExtraImport": true,
        "detail": "oauth_user_system.blueprints.user.forms",
        "documentation": {}
    },
    {
        "label": "UpdateCredentials",
        "importPath": "oauth_user_system.blueprints.user.forms",
        "description": "oauth_user_system.blueprints.user.forms",
        "isExtraImport": true,
        "detail": "oauth_user_system.blueprints.user.forms",
        "documentation": {}
    },
    {
        "label": "deliver_contact_email",
        "importPath": "oauth_user_system.blueprints.contact.tasks",
        "description": "oauth_user_system.blueprints.contact.tasks",
        "isExtraImport": true,
        "detail": "oauth_user_system.blueprints.contact.tasks",
        "documentation": {}
    },
    {
        "label": "assert_status_with_message",
        "importPath": "lib.tests",
        "description": "lib.tests",
        "isExtraImport": true,
        "detail": "lib.tests",
        "documentation": {}
    },
    {
        "label": "assert_status_with_message",
        "importPath": "lib.tests",
        "description": "lib.tests",
        "isExtraImport": true,
        "detail": "lib.tests",
        "documentation": {}
    },
    {
        "label": "ViewTestMixin",
        "importPath": "lib.tests",
        "description": "lib.tests",
        "isExtraImport": true,
        "detail": "lib.tests",
        "documentation": {}
    },
    {
        "label": "deliver_password_reset_email",
        "importPath": "oauth_user_system.blueprints.user.tasks",
        "description": "oauth_user_system.blueprints.user.tasks",
        "isExtraImport": true,
        "detail": "oauth_user_system.blueprints.user.tasks",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "Celery",
        "importPath": "celery",
        "description": "celery",
        "isExtraImport": true,
        "detail": "celery",
        "documentation": {}
    },
    {
        "label": "page",
        "importPath": "oauth_user_system.blueprints.page",
        "description": "oauth_user_system.blueprints.page",
        "isExtraImport": true,
        "detail": "oauth_user_system.blueprints.page",
        "documentation": {}
    },
    {
        "label": "contact",
        "importPath": "oauth_user_system.blueprints.contact",
        "description": "oauth_user_system.blueprints.contact",
        "isExtraImport": true,
        "detail": "oauth_user_system.blueprints.contact",
        "documentation": {}
    },
    {
        "label": "user",
        "importPath": "oauth_user_system.blueprints.user",
        "description": "oauth_user_system.blueprints.user",
        "isExtraImport": true,
        "detail": "oauth_user_system.blueprints.user",
        "documentation": {}
    },
    {
        "label": "DebugToolbarExtension",
        "importPath": "flask_debugtoolbar",
        "description": "flask_debugtoolbar",
        "isExtraImport": true,
        "detail": "flask_debugtoolbar",
        "documentation": {}
    },
    {
        "label": "Mail",
        "importPath": "flask_mail",
        "description": "flask_mail",
        "isExtraImport": true,
        "detail": "flask_mail",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "cli",
        "kind": 2,
        "importPath": "flask-oauth2-user-system.cli.commands.cmd_cov",
        "description": "flask-oauth2-user-system.cli.commands.cmd_cov",
        "peekOfCode": "def cli(path):\n    \"\"\"\n    Run a test coverage report.\n    :param path: Test coverage path\n    :return: Subprocess call result\n    \"\"\"\n    cmd = 'py.test --cov-report term-missing --cov {0}'.format(path)\n    return subprocess.call(cmd, shell=True)",
        "detail": "flask-oauth2-user-system.cli.commands.cmd_cov",
        "documentation": {}
    },
    {
        "label": "cli",
        "kind": 2,
        "importPath": "flask-oauth2-user-system.cli.commands.cmd_db",
        "description": "flask-oauth2-user-system.cli.commands.cmd_db",
        "peekOfCode": "def cli():\n    \"\"\" Run PostgreSQL related tasks. \"\"\"\n    pass\n@click.command()\n@click.option('--with-testdb/--no-with-testdb', default=False,\n              help='Create a test db too?')\ndef init(with_testdb):\n    \"\"\"\n    Initialize the database.\n    :param with_testdb: Create a test database",
        "detail": "flask-oauth2-user-system.cli.commands.cmd_db",
        "documentation": {}
    },
    {
        "label": "init",
        "kind": 2,
        "importPath": "flask-oauth2-user-system.cli.commands.cmd_db",
        "description": "flask-oauth2-user-system.cli.commands.cmd_db",
        "peekOfCode": "def init(with_testdb):\n    \"\"\"\n    Initialize the database.\n    :param with_testdb: Create a test database\n    :return: None\n    \"\"\"\n    db.drop_all()\n    db.create_all()\n    if with_testdb:\n        db_uri = '{0}_test'.format(app.config['SQLALCHEMY_DATABASE_URI'])",
        "detail": "flask-oauth2-user-system.cli.commands.cmd_db",
        "documentation": {}
    },
    {
        "label": "seed",
        "kind": 2,
        "importPath": "flask-oauth2-user-system.cli.commands.cmd_db",
        "description": "flask-oauth2-user-system.cli.commands.cmd_db",
        "peekOfCode": "def seed():\n    \"\"\"\n    Seed the database with an initial user.\n    :return: User instance\n    \"\"\"\n    if User.find_by_identity(app.config['SEED_ADMIN_EMAIL']) is not None:\n        return None\n    params = {\n        'role': 'admin',\n        'email': app.config['SEED_ADMIN_EMAIL'],",
        "detail": "flask-oauth2-user-system.cli.commands.cmd_db",
        "documentation": {}
    },
    {
        "label": "reset",
        "kind": 2,
        "importPath": "flask-oauth2-user-system.cli.commands.cmd_db",
        "description": "flask-oauth2-user-system.cli.commands.cmd_db",
        "peekOfCode": "def reset(ctx, with_testdb):\n    \"\"\"\n    Init and seed automatically.\n    :param with_testdb: Create a test database\n    :return: None\n    \"\"\"\n    ctx.invoke(init, with_testdb=with_testdb)\n    ctx.invoke(seed)\n    return None\ncli.add_command(init)",
        "detail": "flask-oauth2-user-system.cli.commands.cmd_db",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "flask-oauth2-user-system.cli.commands.cmd_db",
        "description": "flask-oauth2-user-system.cli.commands.cmd_db",
        "peekOfCode": "app = create_app()\ndb.app = app\n@click.group()\ndef cli():\n    \"\"\" Run PostgreSQL related tasks. \"\"\"\n    pass\n@click.command()\n@click.option('--with-testdb/--no-with-testdb', default=False,\n              help='Create a test db too?')\ndef init(with_testdb):",
        "detail": "flask-oauth2-user-system.cli.commands.cmd_db",
        "documentation": {}
    },
    {
        "label": "db.app",
        "kind": 5,
        "importPath": "flask-oauth2-user-system.cli.commands.cmd_db",
        "description": "flask-oauth2-user-system.cli.commands.cmd_db",
        "peekOfCode": "db.app = app\n@click.group()\ndef cli():\n    \"\"\" Run PostgreSQL related tasks. \"\"\"\n    pass\n@click.command()\n@click.option('--with-testdb/--no-with-testdb', default=False,\n              help='Create a test db too?')\ndef init(with_testdb):\n    \"\"\"",
        "detail": "flask-oauth2-user-system.cli.commands.cmd_db",
        "documentation": {}
    },
    {
        "label": "cli",
        "kind": 2,
        "importPath": "flask-oauth2-user-system.cli.commands.cmd_flake8",
        "description": "flask-oauth2-user-system.cli.commands.cmd_flake8",
        "peekOfCode": "def cli(skip_init, path):\n    \"\"\"\n    Run flake8 to analyze your code base.\n    :param skip_init: Skip checking __init__.py files\n    :param path: Test coverage path\n    :return: Subprocess call result\n    \"\"\"\n    flake8_flag_exclude = ''\n    if skip_init:\n        flake8_flag_exclude = ' --exclude __init__.py'",
        "detail": "flask-oauth2-user-system.cli.commands.cmd_flake8",
        "documentation": {}
    },
    {
        "label": "cli",
        "kind": 2,
        "importPath": "flask-oauth2-user-system.cli.commands.cmd_test",
        "description": "flask-oauth2-user-system.cli.commands.cmd_test",
        "peekOfCode": "def cli(path):\n    \"\"\"\n    Run tests with Pytest.\n    :param path: Test path\n    :return: Subprocess call result\n    \"\"\"\n    cmd = 'py.test {0}'.format(path)\n    return subprocess.call(cmd, shell=True)",
        "detail": "flask-oauth2-user-system.cli.commands.cmd_test",
        "documentation": {}
    },
    {
        "label": "CLI",
        "kind": 6,
        "importPath": "flask-oauth2-user-system.cli.cli",
        "description": "flask-oauth2-user-system.cli.cli",
        "peekOfCode": "class CLI(click.MultiCommand):\n    def list_commands(self, ctx):\n        \"\"\"\n        Obtain a list of all available commands.\n        :param ctx: Click context\n        :return: List of sorted commands\n        \"\"\"\n        commands = []\n        for filename in os.listdir(cmd_folder):\n            if filename.endswith('.py') and filename.startswith(cmd_prefix):",
        "detail": "flask-oauth2-user-system.cli.cli",
        "documentation": {}
    },
    {
        "label": "cli",
        "kind": 2,
        "importPath": "flask-oauth2-user-system.cli.cli",
        "description": "flask-oauth2-user-system.cli.cli",
        "peekOfCode": "def cli():\n    \"\"\" Commands to help manage your project. \"\"\"\n    pass",
        "detail": "flask-oauth2-user-system.cli.cli",
        "documentation": {}
    },
    {
        "label": "cmd_folder",
        "kind": 5,
        "importPath": "flask-oauth2-user-system.cli.cli",
        "description": "flask-oauth2-user-system.cli.cli",
        "peekOfCode": "cmd_folder = os.path.join(os.path.dirname(__file__), 'commands')\ncmd_prefix = 'cmd_'\nclass CLI(click.MultiCommand):\n    def list_commands(self, ctx):\n        \"\"\"\n        Obtain a list of all available commands.\n        :param ctx: Click context\n        :return: List of sorted commands\n        \"\"\"\n        commands = []",
        "detail": "flask-oauth2-user-system.cli.cli",
        "documentation": {}
    },
    {
        "label": "cmd_prefix",
        "kind": 5,
        "importPath": "flask-oauth2-user-system.cli.cli",
        "description": "flask-oauth2-user-system.cli.cli",
        "peekOfCode": "cmd_prefix = 'cmd_'\nclass CLI(click.MultiCommand):\n    def list_commands(self, ctx):\n        \"\"\"\n        Obtain a list of all available commands.\n        :param ctx: Click context\n        :return: List of sorted commands\n        \"\"\"\n        commands = []\n        for filename in os.listdir(cmd_folder):",
        "detail": "flask-oauth2-user-system.cli.cli",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "flask-oauth2-user-system.config.settings",
        "description": "flask-oauth2-user-system.config.settings",
        "peekOfCode": "DEBUG = True\nSERVER_NAME = 'localhost:8000'\nSECRET_KEY = 'insecurekeyfordev'\n# Flask-Mail.\nMAIL_DEFAULT_SENDER = 'contact@local.host'\nMAIL_SERVER = 'smtp.gmail.com'\nMAIL_PORT = 587\nMAIL_USE_TLS = True\nMAIL_USE_SSL = False\nMAIL_USERNAME = 'you@gmail.com'",
        "detail": "flask-oauth2-user-system.config.settings",
        "documentation": {}
    },
    {
        "label": "SERVER_NAME",
        "kind": 5,
        "importPath": "flask-oauth2-user-system.config.settings",
        "description": "flask-oauth2-user-system.config.settings",
        "peekOfCode": "SERVER_NAME = 'localhost:8000'\nSECRET_KEY = 'insecurekeyfordev'\n# Flask-Mail.\nMAIL_DEFAULT_SENDER = 'contact@local.host'\nMAIL_SERVER = 'smtp.gmail.com'\nMAIL_PORT = 587\nMAIL_USE_TLS = True\nMAIL_USE_SSL = False\nMAIL_USERNAME = 'you@gmail.com'\nMAIL_PASSWORD = 'awesomepassword'",
        "detail": "flask-oauth2-user-system.config.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "flask-oauth2-user-system.config.settings",
        "description": "flask-oauth2-user-system.config.settings",
        "peekOfCode": "SECRET_KEY = 'insecurekeyfordev'\n# Flask-Mail.\nMAIL_DEFAULT_SENDER = 'contact@local.host'\nMAIL_SERVER = 'smtp.gmail.com'\nMAIL_PORT = 587\nMAIL_USE_TLS = True\nMAIL_USE_SSL = False\nMAIL_USERNAME = 'you@gmail.com'\nMAIL_PASSWORD = 'awesomepassword'\n# Celery.",
        "detail": "flask-oauth2-user-system.config.settings",
        "documentation": {}
    },
    {
        "label": "MAIL_DEFAULT_SENDER",
        "kind": 5,
        "importPath": "flask-oauth2-user-system.config.settings",
        "description": "flask-oauth2-user-system.config.settings",
        "peekOfCode": "MAIL_DEFAULT_SENDER = 'contact@local.host'\nMAIL_SERVER = 'smtp.gmail.com'\nMAIL_PORT = 587\nMAIL_USE_TLS = True\nMAIL_USE_SSL = False\nMAIL_USERNAME = 'you@gmail.com'\nMAIL_PASSWORD = 'awesomepassword'\n# Celery.\nCELERY_BROKER_URL = 'redis://:devpassword@redis:6379/0'\nCELERY_RESULT_BACKEND = 'redis://:devpassword@redis:6379/0'",
        "detail": "flask-oauth2-user-system.config.settings",
        "documentation": {}
    },
    {
        "label": "MAIL_SERVER",
        "kind": 5,
        "importPath": "flask-oauth2-user-system.config.settings",
        "description": "flask-oauth2-user-system.config.settings",
        "peekOfCode": "MAIL_SERVER = 'smtp.gmail.com'\nMAIL_PORT = 587\nMAIL_USE_TLS = True\nMAIL_USE_SSL = False\nMAIL_USERNAME = 'you@gmail.com'\nMAIL_PASSWORD = 'awesomepassword'\n# Celery.\nCELERY_BROKER_URL = 'redis://:devpassword@redis:6379/0'\nCELERY_RESULT_BACKEND = 'redis://:devpassword@redis:6379/0'\nCELERY_ACCEPT_CONTENT = ['json']",
        "detail": "flask-oauth2-user-system.config.settings",
        "documentation": {}
    },
    {
        "label": "MAIL_PORT",
        "kind": 5,
        "importPath": "flask-oauth2-user-system.config.settings",
        "description": "flask-oauth2-user-system.config.settings",
        "peekOfCode": "MAIL_PORT = 587\nMAIL_USE_TLS = True\nMAIL_USE_SSL = False\nMAIL_USERNAME = 'you@gmail.com'\nMAIL_PASSWORD = 'awesomepassword'\n# Celery.\nCELERY_BROKER_URL = 'redis://:devpassword@redis:6379/0'\nCELERY_RESULT_BACKEND = 'redis://:devpassword@redis:6379/0'\nCELERY_ACCEPT_CONTENT = ['json']\nCELERY_TASK_SERIALIZER = 'json'",
        "detail": "flask-oauth2-user-system.config.settings",
        "documentation": {}
    },
    {
        "label": "MAIL_USE_TLS",
        "kind": 5,
        "importPath": "flask-oauth2-user-system.config.settings",
        "description": "flask-oauth2-user-system.config.settings",
        "peekOfCode": "MAIL_USE_TLS = True\nMAIL_USE_SSL = False\nMAIL_USERNAME = 'you@gmail.com'\nMAIL_PASSWORD = 'awesomepassword'\n# Celery.\nCELERY_BROKER_URL = 'redis://:devpassword@redis:6379/0'\nCELERY_RESULT_BACKEND = 'redis://:devpassword@redis:6379/0'\nCELERY_ACCEPT_CONTENT = ['json']\nCELERY_TASK_SERIALIZER = 'json'\nCELERY_RESULT_SERIALIZER = 'json'",
        "detail": "flask-oauth2-user-system.config.settings",
        "documentation": {}
    },
    {
        "label": "MAIL_USE_SSL",
        "kind": 5,
        "importPath": "flask-oauth2-user-system.config.settings",
        "description": "flask-oauth2-user-system.config.settings",
        "peekOfCode": "MAIL_USE_SSL = False\nMAIL_USERNAME = 'you@gmail.com'\nMAIL_PASSWORD = 'awesomepassword'\n# Celery.\nCELERY_BROKER_URL = 'redis://:devpassword@redis:6379/0'\nCELERY_RESULT_BACKEND = 'redis://:devpassword@redis:6379/0'\nCELERY_ACCEPT_CONTENT = ['json']\nCELERY_TASK_SERIALIZER = 'json'\nCELERY_RESULT_SERIALIZER = 'json'\nCELERY_REDIS_MAX_CONNECTIONS = 5",
        "detail": "flask-oauth2-user-system.config.settings",
        "documentation": {}
    },
    {
        "label": "MAIL_USERNAME",
        "kind": 5,
        "importPath": "flask-oauth2-user-system.config.settings",
        "description": "flask-oauth2-user-system.config.settings",
        "peekOfCode": "MAIL_USERNAME = 'you@gmail.com'\nMAIL_PASSWORD = 'awesomepassword'\n# Celery.\nCELERY_BROKER_URL = 'redis://:devpassword@redis:6379/0'\nCELERY_RESULT_BACKEND = 'redis://:devpassword@redis:6379/0'\nCELERY_ACCEPT_CONTENT = ['json']\nCELERY_TASK_SERIALIZER = 'json'\nCELERY_RESULT_SERIALIZER = 'json'\nCELERY_REDIS_MAX_CONNECTIONS = 5\n# SQLAlchemy.",
        "detail": "flask-oauth2-user-system.config.settings",
        "documentation": {}
    },
    {
        "label": "MAIL_PASSWORD",
        "kind": 5,
        "importPath": "flask-oauth2-user-system.config.settings",
        "description": "flask-oauth2-user-system.config.settings",
        "peekOfCode": "MAIL_PASSWORD = 'awesomepassword'\n# Celery.\nCELERY_BROKER_URL = 'redis://:devpassword@redis:6379/0'\nCELERY_RESULT_BACKEND = 'redis://:devpassword@redis:6379/0'\nCELERY_ACCEPT_CONTENT = ['json']\nCELERY_TASK_SERIALIZER = 'json'\nCELERY_RESULT_SERIALIZER = 'json'\nCELERY_REDIS_MAX_CONNECTIONS = 5\n# SQLAlchemy.\ndb_uri = 'postgresql://test:Seigneur1!@postgres:5432/oauth_user_system_db'",
        "detail": "flask-oauth2-user-system.config.settings",
        "documentation": {}
    },
    {
        "label": "CELERY_BROKER_URL",
        "kind": 5,
        "importPath": "flask-oauth2-user-system.config.settings",
        "description": "flask-oauth2-user-system.config.settings",
        "peekOfCode": "CELERY_BROKER_URL = 'redis://:devpassword@redis:6379/0'\nCELERY_RESULT_BACKEND = 'redis://:devpassword@redis:6379/0'\nCELERY_ACCEPT_CONTENT = ['json']\nCELERY_TASK_SERIALIZER = 'json'\nCELERY_RESULT_SERIALIZER = 'json'\nCELERY_REDIS_MAX_CONNECTIONS = 5\n# SQLAlchemy.\ndb_uri = 'postgresql://test:Seigneur1!@postgres:5432/oauth_user_system_db'\nSQLALCHEMY_DATABASE_URI = db_uri\nSQLALCHEMY_TRACK_MODIFICATIONS = False",
        "detail": "flask-oauth2-user-system.config.settings",
        "documentation": {}
    },
    {
        "label": "CELERY_RESULT_BACKEND",
        "kind": 5,
        "importPath": "flask-oauth2-user-system.config.settings",
        "description": "flask-oauth2-user-system.config.settings",
        "peekOfCode": "CELERY_RESULT_BACKEND = 'redis://:devpassword@redis:6379/0'\nCELERY_ACCEPT_CONTENT = ['json']\nCELERY_TASK_SERIALIZER = 'json'\nCELERY_RESULT_SERIALIZER = 'json'\nCELERY_REDIS_MAX_CONNECTIONS = 5\n# SQLAlchemy.\ndb_uri = 'postgresql://test:Seigneur1!@postgres:5432/oauth_user_system_db'\nSQLALCHEMY_DATABASE_URI = db_uri\nSQLALCHEMY_TRACK_MODIFICATIONS = False\n# User.",
        "detail": "flask-oauth2-user-system.config.settings",
        "documentation": {}
    },
    {
        "label": "CELERY_ACCEPT_CONTENT",
        "kind": 5,
        "importPath": "flask-oauth2-user-system.config.settings",
        "description": "flask-oauth2-user-system.config.settings",
        "peekOfCode": "CELERY_ACCEPT_CONTENT = ['json']\nCELERY_TASK_SERIALIZER = 'json'\nCELERY_RESULT_SERIALIZER = 'json'\nCELERY_REDIS_MAX_CONNECTIONS = 5\n# SQLAlchemy.\ndb_uri = 'postgresql://test:Seigneur1!@postgres:5432/oauth_user_system_db'\nSQLALCHEMY_DATABASE_URI = db_uri\nSQLALCHEMY_TRACK_MODIFICATIONS = False\n# User.\nSEED_ADMIN_EMAIL = 'dev@local.host'",
        "detail": "flask-oauth2-user-system.config.settings",
        "documentation": {}
    },
    {
        "label": "CELERY_TASK_SERIALIZER",
        "kind": 5,
        "importPath": "flask-oauth2-user-system.config.settings",
        "description": "flask-oauth2-user-system.config.settings",
        "peekOfCode": "CELERY_TASK_SERIALIZER = 'json'\nCELERY_RESULT_SERIALIZER = 'json'\nCELERY_REDIS_MAX_CONNECTIONS = 5\n# SQLAlchemy.\ndb_uri = 'postgresql://test:Seigneur1!@postgres:5432/oauth_user_system_db'\nSQLALCHEMY_DATABASE_URI = db_uri\nSQLALCHEMY_TRACK_MODIFICATIONS = False\n# User.\nSEED_ADMIN_EMAIL = 'dev@local.host'\nSEED_ADMIN_PASSWORD = 'devpassword'",
        "detail": "flask-oauth2-user-system.config.settings",
        "documentation": {}
    },
    {
        "label": "CELERY_RESULT_SERIALIZER",
        "kind": 5,
        "importPath": "flask-oauth2-user-system.config.settings",
        "description": "flask-oauth2-user-system.config.settings",
        "peekOfCode": "CELERY_RESULT_SERIALIZER = 'json'\nCELERY_REDIS_MAX_CONNECTIONS = 5\n# SQLAlchemy.\ndb_uri = 'postgresql://test:Seigneur1!@postgres:5432/oauth_user_system_db'\nSQLALCHEMY_DATABASE_URI = db_uri\nSQLALCHEMY_TRACK_MODIFICATIONS = False\n# User.\nSEED_ADMIN_EMAIL = 'dev@local.host'\nSEED_ADMIN_PASSWORD = 'devpassword'\nREMEMBER_COOKIE_DURATION = timedelta(days=90)",
        "detail": "flask-oauth2-user-system.config.settings",
        "documentation": {}
    },
    {
        "label": "CELERY_REDIS_MAX_CONNECTIONS",
        "kind": 5,
        "importPath": "flask-oauth2-user-system.config.settings",
        "description": "flask-oauth2-user-system.config.settings",
        "peekOfCode": "CELERY_REDIS_MAX_CONNECTIONS = 5\n# SQLAlchemy.\ndb_uri = 'postgresql://test:Seigneur1!@postgres:5432/oauth_user_system_db'\nSQLALCHEMY_DATABASE_URI = db_uri\nSQLALCHEMY_TRACK_MODIFICATIONS = False\n# User.\nSEED_ADMIN_EMAIL = 'dev@local.host'\nSEED_ADMIN_PASSWORD = 'devpassword'\nREMEMBER_COOKIE_DURATION = timedelta(days=90)",
        "detail": "flask-oauth2-user-system.config.settings",
        "documentation": {}
    },
    {
        "label": "db_uri",
        "kind": 5,
        "importPath": "flask-oauth2-user-system.config.settings",
        "description": "flask-oauth2-user-system.config.settings",
        "peekOfCode": "db_uri = 'postgresql://test:Seigneur1!@postgres:5432/oauth_user_system_db'\nSQLALCHEMY_DATABASE_URI = db_uri\nSQLALCHEMY_TRACK_MODIFICATIONS = False\n# User.\nSEED_ADMIN_EMAIL = 'dev@local.host'\nSEED_ADMIN_PASSWORD = 'devpassword'\nREMEMBER_COOKIE_DURATION = timedelta(days=90)",
        "detail": "flask-oauth2-user-system.config.settings",
        "documentation": {}
    },
    {
        "label": "SQLALCHEMY_DATABASE_URI",
        "kind": 5,
        "importPath": "flask-oauth2-user-system.config.settings",
        "description": "flask-oauth2-user-system.config.settings",
        "peekOfCode": "SQLALCHEMY_DATABASE_URI = db_uri\nSQLALCHEMY_TRACK_MODIFICATIONS = False\n# User.\nSEED_ADMIN_EMAIL = 'dev@local.host'\nSEED_ADMIN_PASSWORD = 'devpassword'\nREMEMBER_COOKIE_DURATION = timedelta(days=90)",
        "detail": "flask-oauth2-user-system.config.settings",
        "documentation": {}
    },
    {
        "label": "SQLALCHEMY_TRACK_MODIFICATIONS",
        "kind": 5,
        "importPath": "flask-oauth2-user-system.config.settings",
        "description": "flask-oauth2-user-system.config.settings",
        "peekOfCode": "SQLALCHEMY_TRACK_MODIFICATIONS = False\n# User.\nSEED_ADMIN_EMAIL = 'dev@local.host'\nSEED_ADMIN_PASSWORD = 'devpassword'\nREMEMBER_COOKIE_DURATION = timedelta(days=90)",
        "detail": "flask-oauth2-user-system.config.settings",
        "documentation": {}
    },
    {
        "label": "SEED_ADMIN_EMAIL",
        "kind": 5,
        "importPath": "flask-oauth2-user-system.config.settings",
        "description": "flask-oauth2-user-system.config.settings",
        "peekOfCode": "SEED_ADMIN_EMAIL = 'dev@local.host'\nSEED_ADMIN_PASSWORD = 'devpassword'\nREMEMBER_COOKIE_DURATION = timedelta(days=90)",
        "detail": "flask-oauth2-user-system.config.settings",
        "documentation": {}
    },
    {
        "label": "SEED_ADMIN_PASSWORD",
        "kind": 5,
        "importPath": "flask-oauth2-user-system.config.settings",
        "description": "flask-oauth2-user-system.config.settings",
        "peekOfCode": "SEED_ADMIN_PASSWORD = 'devpassword'\nREMEMBER_COOKIE_DURATION = timedelta(days=90)",
        "detail": "flask-oauth2-user-system.config.settings",
        "documentation": {}
    },
    {
        "label": "REMEMBER_COOKIE_DURATION",
        "kind": 5,
        "importPath": "flask-oauth2-user-system.config.settings",
        "description": "flask-oauth2-user-system.config.settings",
        "peekOfCode": "REMEMBER_COOKIE_DURATION = timedelta(days=90)",
        "detail": "flask-oauth2-user-system.config.settings",
        "documentation": {}
    },
    {
        "label": "MAIL_USERNAME",
        "kind": 5,
        "importPath": "flask-oauth2-user-system.instance.settings",
        "description": "flask-oauth2-user-system.instance.settings",
        "peekOfCode": "MAIL_USERNAME = 'buildasaasappwithflask@gmail.com'\nMAIL_PASSWORD = 'helicopterpantswalrusfoot'",
        "detail": "flask-oauth2-user-system.instance.settings",
        "documentation": {}
    },
    {
        "label": "MAIL_PASSWORD",
        "kind": 5,
        "importPath": "flask-oauth2-user-system.instance.settings",
        "description": "flask-oauth2-user-system.instance.settings",
        "peekOfCode": "MAIL_PASSWORD = 'helicopterpantswalrusfoot'",
        "detail": "flask-oauth2-user-system.instance.settings",
        "documentation": {}
    },
    {
        "label": "send_template_message",
        "kind": 2,
        "importPath": "flask-oauth2-user-system.lib.flask_mailplus",
        "description": "flask-oauth2-user-system.lib.flask_mailplus",
        "peekOfCode": "def send_template_message(template=None, ctx=None, *args, **kwargs):\n    \"\"\"\n    Send a templated e-mail using a similar signature as Flask-Mail:\n    http://pythonhosted.org/Flask-Mail/\n    Except, it also supports template rendering. If you want to use a template\n    then just omit the body and html kwargs to Flask-Mail and instead supply\n    a path to a template. It will auto-lookup and render text/html messages.\n    Example:\n        ctx = {'user': current_user, 'reset_token': token}\n        send_template_message('Password reset from Foo', ['you@example.com'],",
        "detail": "flask-oauth2-user-system.lib.flask_mailplus",
        "documentation": {}
    },
    {
        "label": "safe_next_url",
        "kind": 2,
        "importPath": "flask-oauth2-user-system.lib.safe_next_url",
        "description": "flask-oauth2-user-system.lib.safe_next_url",
        "peekOfCode": "def safe_next_url(target):\n    \"\"\"\n    Ensure a relative URL path is on the same domain as this host.\n    This protects against the 'Open redirect vulnerability'.\n    :param target: Relative url (typically supplied by Flask-Login)\n    :type target: str\n    :return: str\n    \"\"\"\n    return urljoin(request.host_url, target)",
        "detail": "flask-oauth2-user-system.lib.safe_next_url",
        "documentation": {}
    },
    {
        "label": "ViewTestMixin",
        "kind": 6,
        "importPath": "flask-oauth2-user-system.lib.tests",
        "description": "flask-oauth2-user-system.lib.tests",
        "peekOfCode": "class ViewTestMixin(object):\n    \"\"\"\n    Automatically load in a session and client, this is common for a lot of\n    tests that work with views.\n    \"\"\"\n    @pytest.fixture(autouse=True)\n    def set_common_fixtures(self, session, client):\n        self.session = session\n        self.client = client\n    def login(self, identity='admin@local.host', password='password'):",
        "detail": "flask-oauth2-user-system.lib.tests",
        "documentation": {}
    },
    {
        "label": "assert_status_with_message",
        "kind": 2,
        "importPath": "flask-oauth2-user-system.lib.tests",
        "description": "flask-oauth2-user-system.lib.tests",
        "peekOfCode": "def assert_status_with_message(status_code=200, response=None, message=None):\n    \"\"\"\n    Check to see if a message is contained within a response.\n    :param status_code: Status code that defaults to 200\n    :type status_code: int\n    :param response: Flask response\n    :type response: str\n    :param message: String to check for\n    :type message: str\n    :return: None",
        "detail": "flask-oauth2-user-system.lib.tests",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "flask-oauth2-user-system.lib.tests",
        "description": "flask-oauth2-user-system.lib.tests",
        "peekOfCode": "def login(client, username='', password=''):\n    \"\"\"\n    Log a specific user in.\n    :param client: Flask client\n    :param username: The username\n    :type username: str\n    :param password: The password\n    :type password: str\n    :return: Flask response\n    \"\"\"",
        "detail": "flask-oauth2-user-system.lib.tests",
        "documentation": {}
    },
    {
        "label": "logout",
        "kind": 2,
        "importPath": "flask-oauth2-user-system.lib.tests",
        "description": "flask-oauth2-user-system.lib.tests",
        "peekOfCode": "def logout(client):\n    \"\"\"\n    Log a specific user out.\n    :param client: Flask client\n    :return: Flask response\n    \"\"\"\n    return client.get(url_for('user.logout'), follow_redirects=True)",
        "detail": "flask-oauth2-user-system.lib.tests",
        "documentation": {}
    },
    {
        "label": "tzware_datetime",
        "kind": 2,
        "importPath": "flask-oauth2-user-system.lib.util_datetime",
        "description": "flask-oauth2-user-system.lib.util_datetime",
        "peekOfCode": "def tzware_datetime():\n    \"\"\"\n    Return a timezone aware datetime.\n    :return: Datetime\n    \"\"\"\n    return datetime.datetime.now(pytz.utc)\ndef timedelta_months(months, compare_date=None):\n    \"\"\"\n    Return a new datetime with a month offset applied.\n    :param months: Amount of months to offset",
        "detail": "flask-oauth2-user-system.lib.util_datetime",
        "documentation": {}
    },
    {
        "label": "timedelta_months",
        "kind": 2,
        "importPath": "flask-oauth2-user-system.lib.util_datetime",
        "description": "flask-oauth2-user-system.lib.util_datetime",
        "peekOfCode": "def timedelta_months(months, compare_date=None):\n    \"\"\"\n    Return a new datetime with a month offset applied.\n    :param months: Amount of months to offset\n    :type months: int\n    :param compare_date: Date to compare at\n    :type compare_date: date\n    :return: datetime\n    \"\"\"\n    if compare_date is None:",
        "detail": "flask-oauth2-user-system.lib.util_datetime",
        "documentation": {}
    },
    {
        "label": "AwareDateTime",
        "kind": 6,
        "importPath": "flask-oauth2-user-system.lib.util_sqlalchemy",
        "description": "flask-oauth2-user-system.lib.util_sqlalchemy",
        "peekOfCode": "class AwareDateTime(TypeDecorator):\n    \"\"\"\n    A DateTime type which can only store tz-aware DateTimes.\n    Source:\n      https://gist.github.com/inklesspen/90b554c864b99340747e\n    \"\"\"\n    impl = DateTime(timezone=True)\n    def process_bind_param(self, value, dialect):\n        if isinstance(value, datetime.datetime) and value.tzinfo is None:\n            raise ValueError('{!r} must be TZ-aware'.format(value))",
        "detail": "flask-oauth2-user-system.lib.util_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ResourceMixin",
        "kind": 6,
        "importPath": "flask-oauth2-user-system.lib.util_sqlalchemy",
        "description": "flask-oauth2-user-system.lib.util_sqlalchemy",
        "peekOfCode": "class ResourceMixin(object):\n    # Keep track when records are created and updated.\n    created_on = db.Column(AwareDateTime(),\n                           default=tzware_datetime)\n    updated_on = db.Column(AwareDateTime(),\n                           default=tzware_datetime,\n                           onupdate=tzware_datetime)\n    def save(self):\n        \"\"\"\n        Save a model instance.",
        "detail": "flask-oauth2-user-system.lib.util_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ModelForm",
        "kind": 6,
        "importPath": "flask-oauth2-user-system.lib.util_wtforms",
        "description": "flask-oauth2-user-system.lib.util_wtforms",
        "peekOfCode": "class ModelForm(Form):\n    \"\"\"\n    wtforms_components exposes ModelForm but their ModelForm does not inherit\n    from flask_wtf's Form, but instead WTForm's Form.\n    However, in order to get CSRF protection handled by default we need to\n    inherit from flask_wtf's Form. So let's just copy his class directly.\n    We modified it by removing the format argument so that wtforms_component\n    uses its own default which is to pass in request.form automatically.\n    \"\"\"\n    def __init__(self, obj=None, prefix='', **kwargs):",
        "detail": "flask-oauth2-user-system.lib.util_wtforms",
        "documentation": {}
    },
    {
        "label": "choices_from_dict",
        "kind": 2,
        "importPath": "flask-oauth2-user-system.lib.util_wtforms",
        "description": "flask-oauth2-user-system.lib.util_wtforms",
        "peekOfCode": "def choices_from_dict(source, prepend_blank=True):\n    \"\"\"\n    Convert a dict to a format that's compatible with WTForm's choices. It also\n    optionally prepends a \"Please select one...\" value.\n    Example:\n      # Convert this data structure:\n      STATUS = OrderedDict([\n          ('unread', 'Unread'),\n          ('open', 'Open'),\n          ('contacted', 'Contacted'),",
        "detail": "flask-oauth2-user-system.lib.util_wtforms",
        "documentation": {}
    },
    {
        "label": "choices_from_list",
        "kind": 2,
        "importPath": "flask-oauth2-user-system.lib.util_wtforms",
        "description": "flask-oauth2-user-system.lib.util_wtforms",
        "peekOfCode": "def choices_from_list(source, prepend_blank=True):\n    \"\"\"\n    Convert a list to a format that's compatible with WTForm's choices. It also\n    optionally prepends a \"Please select one...\" value.\n    Example:\n      # Convert this data structure:\n      TIMEZONES = (\n        'Africa/Abidjan',\n        'Africa/Accra',\n        'Africa/Addis_Ababa'",
        "detail": "flask-oauth2-user-system.lib.util_wtforms",
        "documentation": {}
    },
    {
        "label": "ContactForm",
        "kind": 6,
        "importPath": "flask-oauth2-user-system.oauth_user_system.blueprints.contact.forms",
        "description": "flask-oauth2-user-system.oauth_user_system.blueprints.contact.forms",
        "peekOfCode": "class ContactForm(Form):\n    email = EmailField(\"What's your e-mail address?\",\n                       [DataRequired(), Length(3, 254)])\n    message = TextAreaField(\"What's your question or issue?\",\n                            [DataRequired(), Length(1, 8192)])",
        "detail": "flask-oauth2-user-system.oauth_user_system.blueprints.contact.forms",
        "documentation": {}
    },
    {
        "label": "deliver_contact_email",
        "kind": 2,
        "importPath": "flask-oauth2-user-system.oauth_user_system.blueprints.contact.tasks",
        "description": "flask-oauth2-user-system.oauth_user_system.blueprints.contact.tasks",
        "peekOfCode": "def deliver_contact_email(email, message):\n    \"\"\"\n    Send a contact e-mail.\n    :param email: E-mail address of the visitor\n    :type user_id: str\n    :param message: E-mail message\n    :type user_id: str\n    :return: None\n    \"\"\"\n    ctx = {'email': email, 'message': message}",
        "detail": "flask-oauth2-user-system.oauth_user_system.blueprints.contact.tasks",
        "documentation": {}
    },
    {
        "label": "celery",
        "kind": 5,
        "importPath": "flask-oauth2-user-system.oauth_user_system.blueprints.contact.tasks",
        "description": "flask-oauth2-user-system.oauth_user_system.blueprints.contact.tasks",
        "peekOfCode": "celery = create_celery_app()\n@celery.task()\ndef deliver_contact_email(email, message):\n    \"\"\"\n    Send a contact e-mail.\n    :param email: E-mail address of the visitor\n    :type user_id: str\n    :param message: E-mail message\n    :type user_id: str\n    :return: None",
        "detail": "flask-oauth2-user-system.oauth_user_system.blueprints.contact.tasks",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "flask-oauth2-user-system.oauth_user_system.blueprints.contact.views",
        "description": "flask-oauth2-user-system.oauth_user_system.blueprints.contact.views",
        "peekOfCode": "def index():\n    # Pre-populate the email field if the user is signed in.\n    form = ContactForm(obj=current_user)\n    if form.validate_on_submit():\n        # This prevents circular imports.\n        from oauth_user_system.blueprints.contact.tasks import deliver_contact_email\n        deliver_contact_email.delay(request.form.get('email'),\n                                    request.form.get('message'))\n        flash('Thanks, expect a response shortly.', 'success')\n        return redirect(url_for('contact.index'))",
        "detail": "flask-oauth2-user-system.oauth_user_system.blueprints.contact.views",
        "documentation": {}
    },
    {
        "label": "contact",
        "kind": 5,
        "importPath": "flask-oauth2-user-system.oauth_user_system.blueprints.contact.views",
        "description": "flask-oauth2-user-system.oauth_user_system.blueprints.contact.views",
        "peekOfCode": "contact = Blueprint('contact', __name__, template_folder='templates')\n@contact.route('/contact', methods=['GET', 'POST'])\ndef index():\n    # Pre-populate the email field if the user is signed in.\n    form = ContactForm(obj=current_user)\n    if form.validate_on_submit():\n        # This prevents circular imports.\n        from oauth_user_system.blueprints.contact.tasks import deliver_contact_email\n        deliver_contact_email.delay(request.form.get('email'),\n                                    request.form.get('message'))",
        "detail": "flask-oauth2-user-system.oauth_user_system.blueprints.contact.views",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "flask-oauth2-user-system.oauth_user_system.blueprints.page.views",
        "description": "flask-oauth2-user-system.oauth_user_system.blueprints.page.views",
        "peekOfCode": "def home():\n    return render_template('page/home.html')\n@page.route('/terms')\ndef terms():\n    return render_template('page/terms.html')\n@page.route('/privacy')\ndef privacy():\n    return render_template('page/privacy.html')",
        "detail": "flask-oauth2-user-system.oauth_user_system.blueprints.page.views",
        "documentation": {}
    },
    {
        "label": "terms",
        "kind": 2,
        "importPath": "flask-oauth2-user-system.oauth_user_system.blueprints.page.views",
        "description": "flask-oauth2-user-system.oauth_user_system.blueprints.page.views",
        "peekOfCode": "def terms():\n    return render_template('page/terms.html')\n@page.route('/privacy')\ndef privacy():\n    return render_template('page/privacy.html')",
        "detail": "flask-oauth2-user-system.oauth_user_system.blueprints.page.views",
        "documentation": {}
    },
    {
        "label": "privacy",
        "kind": 2,
        "importPath": "flask-oauth2-user-system.oauth_user_system.blueprints.page.views",
        "description": "flask-oauth2-user-system.oauth_user_system.blueprints.page.views",
        "peekOfCode": "def privacy():\n    return render_template('page/privacy.html')",
        "detail": "flask-oauth2-user-system.oauth_user_system.blueprints.page.views",
        "documentation": {}
    },
    {
        "label": "page",
        "kind": 5,
        "importPath": "flask-oauth2-user-system.oauth_user_system.blueprints.page.views",
        "description": "flask-oauth2-user-system.oauth_user_system.blueprints.page.views",
        "peekOfCode": "page = Blueprint('page', __name__, template_folder='templates')\n@page.route('/')\ndef home():\n    return render_template('page/home.html')\n@page.route('/terms')\ndef terms():\n    return render_template('page/terms.html')\n@page.route('/privacy')\ndef privacy():\n    return render_template('page/privacy.html')",
        "detail": "flask-oauth2-user-system.oauth_user_system.blueprints.page.views",
        "documentation": {}
    },
    {
        "label": "anonymous_required",
        "kind": 2,
        "importPath": "flask-oauth2-user-system.oauth_user_system.blueprints.user.decorators",
        "description": "flask-oauth2-user-system.oauth_user_system.blueprints.user.decorators",
        "peekOfCode": "def anonymous_required(url='/settings'):\n    \"\"\"\n    Redirect a user to a specified location if they are already signed in.\n    :param url: URL to be redirected to if invalid\n    :type url: str\n    :return: Function\n    \"\"\"\n    def decorator(f):\n        @wraps(f)\n        def decorated_function(*args, **kwargs):",
        "detail": "flask-oauth2-user-system.oauth_user_system.blueprints.user.decorators",
        "documentation": {}
    },
    {
        "label": "role_required",
        "kind": 2,
        "importPath": "flask-oauth2-user-system.oauth_user_system.blueprints.user.decorators",
        "description": "flask-oauth2-user-system.oauth_user_system.blueprints.user.decorators",
        "peekOfCode": "def role_required(*roles):\n    \"\"\"\n    Does a user have permission to view this page?\n    :param *roles: 1 or more allowed roles\n    :return: Function\n    \"\"\"\n    def decorator(f):\n        @wraps(f)\n        def decorated_function(*args, **kwargs):\n            if current_user.role not in roles:",
        "detail": "flask-oauth2-user-system.oauth_user_system.blueprints.user.decorators",
        "documentation": {}
    },
    {
        "label": "LoginForm",
        "kind": 6,
        "importPath": "flask-oauth2-user-system.oauth_user_system.blueprints.user.forms",
        "description": "flask-oauth2-user-system.oauth_user_system.blueprints.user.forms",
        "peekOfCode": "class LoginForm(Form):\n    next = HiddenField()\n    identity = StringField('Username or email',\n                           [DataRequired(), Length(3, 254)])\n    password = PasswordField('Password', [DataRequired(), Length(8, 128)])\n    # remember = BooleanField('Stay signed in')\nclass BeginPasswordResetForm(Form):\n    identity = StringField('Username or email',\n                           [DataRequired(),\n                            Length(3, 254),",
        "detail": "flask-oauth2-user-system.oauth_user_system.blueprints.user.forms",
        "documentation": {}
    },
    {
        "label": "BeginPasswordResetForm",
        "kind": 6,
        "importPath": "flask-oauth2-user-system.oauth_user_system.blueprints.user.forms",
        "description": "flask-oauth2-user-system.oauth_user_system.blueprints.user.forms",
        "peekOfCode": "class BeginPasswordResetForm(Form):\n    identity = StringField('Username or email',\n                           [DataRequired(),\n                            Length(3, 254),\n                            ensure_identity_exists])\nclass PasswordResetForm(Form):\n    reset_token = HiddenField()\n    password = PasswordField('Password', [DataRequired(), Length(8, 128)])\nclass SignupForm(ModelForm):\n    email = EmailField(validators=[",
        "detail": "flask-oauth2-user-system.oauth_user_system.blueprints.user.forms",
        "documentation": {}
    },
    {
        "label": "PasswordResetForm",
        "kind": 6,
        "importPath": "flask-oauth2-user-system.oauth_user_system.blueprints.user.forms",
        "description": "flask-oauth2-user-system.oauth_user_system.blueprints.user.forms",
        "peekOfCode": "class PasswordResetForm(Form):\n    reset_token = HiddenField()\n    password = PasswordField('Password', [DataRequired(), Length(8, 128)])\nclass SignupForm(ModelForm):\n    email = EmailField(validators=[\n        DataRequired(),\n        Email(),\n        Unique(\n            User.email,\n            get_session=lambda: db.session,",
        "detail": "flask-oauth2-user-system.oauth_user_system.blueprints.user.forms",
        "documentation": {}
    },
    {
        "label": "SignupForm",
        "kind": 6,
        "importPath": "flask-oauth2-user-system.oauth_user_system.blueprints.user.forms",
        "description": "flask-oauth2-user-system.oauth_user_system.blueprints.user.forms",
        "peekOfCode": "class SignupForm(ModelForm):\n    email = EmailField(validators=[\n        DataRequired(),\n        Email(),\n        Unique(\n            User.email,\n            get_session=lambda: db.session,\n            message='THIS IS MY NEW ERROR MESSAGE.'\n        )\n    ])",
        "detail": "flask-oauth2-user-system.oauth_user_system.blueprints.user.forms",
        "documentation": {}
    },
    {
        "label": "WelcomeForm",
        "kind": 6,
        "importPath": "flask-oauth2-user-system.oauth_user_system.blueprints.user.forms",
        "description": "flask-oauth2-user-system.oauth_user_system.blueprints.user.forms",
        "peekOfCode": "class WelcomeForm(ModelForm):\n    username_message = 'Letters, numbers and underscores only please.'\n    username = StringField(validators=[\n        Unique(\n            User.username,\n            get_session=lambda: db.session,\n            message='THIS IS MY NEW ERROR MESSAGE.'\n        ),\n        DataRequired(),\n        Length(1, 16),",
        "detail": "flask-oauth2-user-system.oauth_user_system.blueprints.user.forms",
        "documentation": {}
    },
    {
        "label": "UpdateCredentials",
        "kind": 6,
        "importPath": "flask-oauth2-user-system.oauth_user_system.blueprints.user.forms",
        "description": "flask-oauth2-user-system.oauth_user_system.blueprints.user.forms",
        "peekOfCode": "class UpdateCredentials(ModelForm):\n    current_password = PasswordField('Current password',\n                                     [DataRequired(),\n                                      Length(8, 128),\n                                      ensure_existing_password_matches])\n    email = EmailField(validators=[\n        Email(),\n        Unique(\n            User.email,\n            get_session=lambda: db.session,",
        "detail": "flask-oauth2-user-system.oauth_user_system.blueprints.user.forms",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "flask-oauth2-user-system.oauth_user_system.blueprints.user.models",
        "description": "flask-oauth2-user-system.oauth_user_system.blueprints.user.models",
        "peekOfCode": "class User(UserMixin, ResourceMixin, db.Model):\n    ROLE = OrderedDict([\n        ('member', 'Member'),\n        ('admin', 'Admin')\n    ])\n    __tablename__ = 'users'\n    id = db.Column(db.Integer, primary_key=True)\n    # Authentication.\n    role = db.Column(db.Enum(*ROLE, name='role_types', native_enum=False),\n                     index=True, nullable=False, server_default='member')",
        "detail": "flask-oauth2-user-system.oauth_user_system.blueprints.user.models",
        "documentation": {}
    },
    {
        "label": "deliver_password_reset_email",
        "kind": 2,
        "importPath": "flask-oauth2-user-system.oauth_user_system.blueprints.user.tasks",
        "description": "flask-oauth2-user-system.oauth_user_system.blueprints.user.tasks",
        "peekOfCode": "def deliver_password_reset_email(user_id, reset_token):\n    \"\"\"\n    Send a reset password e-mail to a user.\n    :param user_id: The user id\n    :type user_id: int\n    :param reset_token: The reset token\n    :type reset_token: str\n    :return: None if a user was not found\n    \"\"\"\n    user = User.query.get(user_id)",
        "detail": "flask-oauth2-user-system.oauth_user_system.blueprints.user.tasks",
        "documentation": {}
    },
    {
        "label": "celery",
        "kind": 5,
        "importPath": "flask-oauth2-user-system.oauth_user_system.blueprints.user.tasks",
        "description": "flask-oauth2-user-system.oauth_user_system.blueprints.user.tasks",
        "peekOfCode": "celery = create_celery_app()\n@celery.task()\ndef deliver_password_reset_email(user_id, reset_token):\n    \"\"\"\n    Send a reset password e-mail to a user.\n    :param user_id: The user id\n    :type user_id: int\n    :param reset_token: The reset token\n    :type reset_token: str\n    :return: None if a user was not found",
        "detail": "flask-oauth2-user-system.oauth_user_system.blueprints.user.tasks",
        "documentation": {}
    },
    {
        "label": "ensure_identity_exists",
        "kind": 2,
        "importPath": "flask-oauth2-user-system.oauth_user_system.blueprints.user.validations",
        "description": "flask-oauth2-user-system.oauth_user_system.blueprints.user.validations",
        "peekOfCode": "def ensure_identity_exists(form, field):\n    \"\"\"\n    Ensure an identity exists.\n    :param form: wtforms Instance\n    :param field: Field being passed in\n    :return: None\n    \"\"\"\n    user = User.find_by_identity(field.data)\n    if not user:\n        raise ValidationError('Unable to locate account.')",
        "detail": "flask-oauth2-user-system.oauth_user_system.blueprints.user.validations",
        "documentation": {}
    },
    {
        "label": "ensure_existing_password_matches",
        "kind": 2,
        "importPath": "flask-oauth2-user-system.oauth_user_system.blueprints.user.validations",
        "description": "flask-oauth2-user-system.oauth_user_system.blueprints.user.validations",
        "peekOfCode": "def ensure_existing_password_matches(form, field):\n    \"\"\"\n    Ensure that the current password matches their existing password.\n    :param form: wtforms Instance\n    :param field: Field being passed in\n    :return: None\n    \"\"\"\n    user = User.query.get(form._obj.id)\n    if not user.authenticated(password=field.data):\n        raise ValidationError('Does not match.')",
        "detail": "flask-oauth2-user-system.oauth_user_system.blueprints.user.validations",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "flask-oauth2-user-system.oauth_user_system.blueprints.user.views",
        "description": "flask-oauth2-user-system.oauth_user_system.blueprints.user.views",
        "peekOfCode": "def login():\n    form = LoginForm(next=request.args.get('next'))\n    if form.validate_on_submit():\n        u = User.find_by_identity(request.form.get('identity'))\n        if u and u.authenticated(password=request.form.get('password')):\n            # As you can see remember me is always enabled, this was a design\n            # decision I made because more often than not users want this\n            # enabled. This allows for a less complicated login form.\n            #\n            # If however you want them to be able to select whether or not they",
        "detail": "flask-oauth2-user-system.oauth_user_system.blueprints.user.views",
        "documentation": {}
    },
    {
        "label": "logout",
        "kind": 2,
        "importPath": "flask-oauth2-user-system.oauth_user_system.blueprints.user.views",
        "description": "flask-oauth2-user-system.oauth_user_system.blueprints.user.views",
        "peekOfCode": "def logout():\n    logout_user()\n    flash('You have been logged out.', 'success')\n    return redirect(url_for('user.login'))\n@user.route('/account/begin_password_reset', methods=['GET', 'POST'])\n@anonymous_required()\ndef begin_password_reset():\n    form = BeginPasswordResetForm()\n    if form.validate_on_submit():\n        u = User.initialize_password_reset(request.form.get('identity'))",
        "detail": "flask-oauth2-user-system.oauth_user_system.blueprints.user.views",
        "documentation": {}
    },
    {
        "label": "begin_password_reset",
        "kind": 2,
        "importPath": "flask-oauth2-user-system.oauth_user_system.blueprints.user.views",
        "description": "flask-oauth2-user-system.oauth_user_system.blueprints.user.views",
        "peekOfCode": "def begin_password_reset():\n    form = BeginPasswordResetForm()\n    if form.validate_on_submit():\n        u = User.initialize_password_reset(request.form.get('identity'))\n        flash('An email has been sent to {0}.'.format(u.email), 'success')\n        return redirect(url_for('user.login'))\n    return render_template('user/begin_password_reset.html', form=form)\n@user.route('/account/password_reset', methods=['GET', 'POST'])\n@anonymous_required()\ndef password_reset():",
        "detail": "flask-oauth2-user-system.oauth_user_system.blueprints.user.views",
        "documentation": {}
    },
    {
        "label": "password_reset",
        "kind": 2,
        "importPath": "flask-oauth2-user-system.oauth_user_system.blueprints.user.views",
        "description": "flask-oauth2-user-system.oauth_user_system.blueprints.user.views",
        "peekOfCode": "def password_reset():\n    form = PasswordResetForm(reset_token=request.args.get('reset_token'))\n    if form.validate_on_submit():\n        u = User.deserialize_token(request.form.get('reset_token'))\n        if u is None:\n            flash('Your reset token has expired or was tampered with.',\n                  'error')\n            return redirect(url_for('user.begin_password_reset'))\n        form.populate_obj(u)\n        u.password = User.encrypt_password(request.form.get('password'))",
        "detail": "flask-oauth2-user-system.oauth_user_system.blueprints.user.views",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": "flask-oauth2-user-system.oauth_user_system.blueprints.user.views",
        "description": "flask-oauth2-user-system.oauth_user_system.blueprints.user.views",
        "peekOfCode": "def signup():\n    form = SignupForm()\n    if form.validate_on_submit():\n        u = User()\n        form.populate_obj(u)\n        u.password = User.encrypt_password(request.form.get('password'))\n        u.save()\n        if login_user(u):\n            flash('Awesome, thanks for signing up!', 'success')\n            return redirect(url_for('user.welcome'))",
        "detail": "flask-oauth2-user-system.oauth_user_system.blueprints.user.views",
        "documentation": {}
    },
    {
        "label": "welcome",
        "kind": 2,
        "importPath": "flask-oauth2-user-system.oauth_user_system.blueprints.user.views",
        "description": "flask-oauth2-user-system.oauth_user_system.blueprints.user.views",
        "peekOfCode": "def welcome():\n    if current_user.username:\n        flash('You already picked a username.', 'warning')\n        return redirect(url_for('user.settings'))\n    form = WelcomeForm()\n    if form.validate_on_submit():\n        current_user.username = request.form.get('username')\n        current_user.save()\n        flash('Sign up is complete, enjoy our services.', 'success')\n        return redirect(url_for('user.settings'))",
        "detail": "flask-oauth2-user-system.oauth_user_system.blueprints.user.views",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 2,
        "importPath": "flask-oauth2-user-system.oauth_user_system.blueprints.user.views",
        "description": "flask-oauth2-user-system.oauth_user_system.blueprints.user.views",
        "peekOfCode": "def settings():\n    return render_template('user/settings.html')\n@user.route('/settings/update_credentials', methods=['GET', 'POST'])\n@login_required\ndef update_credentials():\n    form = UpdateCredentials(current_user, uid=current_user.id)\n    if form.validate_on_submit():\n        new_password = request.form.get('password', '')\n        current_user.email = request.form.get('email')\n        if new_password:",
        "detail": "flask-oauth2-user-system.oauth_user_system.blueprints.user.views",
        "documentation": {}
    },
    {
        "label": "update_credentials",
        "kind": 2,
        "importPath": "flask-oauth2-user-system.oauth_user_system.blueprints.user.views",
        "description": "flask-oauth2-user-system.oauth_user_system.blueprints.user.views",
        "peekOfCode": "def update_credentials():\n    form = UpdateCredentials(current_user, uid=current_user.id)\n    if form.validate_on_submit():\n        new_password = request.form.get('password', '')\n        current_user.email = request.form.get('email')\n        if new_password:\n            current_user.password = User.encrypt_password(new_password)\n        current_user.save()\n        flash('Your sign in settings have been updated.', 'success')\n        return redirect(url_for('user.settings'))",
        "detail": "flask-oauth2-user-system.oauth_user_system.blueprints.user.views",
        "documentation": {}
    },
    {
        "label": "user",
        "kind": 5,
        "importPath": "flask-oauth2-user-system.oauth_user_system.blueprints.user.views",
        "description": "flask-oauth2-user-system.oauth_user_system.blueprints.user.views",
        "peekOfCode": "user = Blueprint('user', __name__, template_folder='templates')\n@user.route('/login', methods=['GET', 'POST'])\n@anonymous_required()\ndef login():\n    form = LoginForm(next=request.args.get('next'))\n    if form.validate_on_submit():\n        u = User.find_by_identity(request.form.get('identity'))\n        if u and u.authenticated(password=request.form.get('password')):\n            # As you can see remember me is always enabled, this was a design\n            # decision I made because more often than not users want this",
        "detail": "flask-oauth2-user-system.oauth_user_system.blueprints.user.views",
        "documentation": {}
    },
    {
        "label": "TestTasks",
        "kind": 6,
        "importPath": "flask-oauth2-user-system.oauth_user_system.tests.contact.test_tasks",
        "description": "flask-oauth2-user-system.oauth_user_system.tests.contact.test_tasks",
        "peekOfCode": "class TestTasks(object):\n    def test_deliver_support_email(self):\n        \"\"\" Deliver a contact email. \"\"\"\n        form = {\n          'email': 'foo@bar.com',\n          'message': 'Test message from Snake Eyes.'\n        }\n        with mail.record_messages() as outbox:\n            deliver_contact_email(form.get('email'), form.get('message'))\n            assert len(outbox) == 1",
        "detail": "flask-oauth2-user-system.oauth_user_system.tests.contact.test_tasks",
        "documentation": {}
    },
    {
        "label": "TestContact",
        "kind": 6,
        "importPath": "flask-oauth2-user-system.oauth_user_system.tests.contact.test_views",
        "description": "flask-oauth2-user-system.oauth_user_system.tests.contact.test_views",
        "peekOfCode": "class TestContact(object):\n    def test_contact_page(self, client):\n        \"\"\" Contact page should respond with a success 200. \"\"\"\n        response = client.get(url_for('contact.index'))\n        assert response.status_code == 200\n    def test_contact_form(self, client):\n        \"\"\" Contact form should redirect with a message. \"\"\"\n        form = {\n          'email': 'foo@bar.com',\n          'message': 'Test message from Snake Eyes.'",
        "detail": "flask-oauth2-user-system.oauth_user_system.tests.contact.test_views",
        "documentation": {}
    },
    {
        "label": "TestPage",
        "kind": 6,
        "importPath": "flask-oauth2-user-system.oauth_user_system.tests.page.test_views",
        "description": "flask-oauth2-user-system.oauth_user_system.tests.page.test_views",
        "peekOfCode": "class TestPage(object):\n    def test_home_page(self, client):\n        \"\"\" Home page should respond with a success 200. \"\"\"\n        response = client.get(url_for('page.home'))\n        assert response.status_code == 200\n    def test_terms_page(self, client):\n        \"\"\" Terms page should respond with a success 200. \"\"\"\n        response = client.get(url_for('page.terms'))\n        assert response.status_code == 200\n    def test_privacy_page(self, client):",
        "detail": "flask-oauth2-user-system.oauth_user_system.tests.page.test_views",
        "documentation": {}
    },
    {
        "label": "TestUser",
        "kind": 6,
        "importPath": "flask-oauth2-user-system.oauth_user_system.tests.user.test_models",
        "description": "flask-oauth2-user-system.oauth_user_system.tests.user.test_models",
        "peekOfCode": "class TestUser(object):\n    def test_serialize_token(self, token):\n        \"\"\" Token serializer serializes a JWS correctly. \"\"\"\n        assert token.count('.') == 2\n    def test_deserialize_token(self, token):\n        \"\"\" Token de-serializer de-serializes a JWS correctly. \"\"\"\n        user = User.deserialize_token(token)\n        assert user.email == 'admin@local.host'\n    def test_deserialize_token_tampered(self, token):\n        \"\"\" Token de-serializer returns None when it's been tampered with. \"\"\"",
        "detail": "flask-oauth2-user-system.oauth_user_system.tests.user.test_models",
        "documentation": {}
    },
    {
        "label": "TestTasks",
        "kind": 6,
        "importPath": "flask-oauth2-user-system.oauth_user_system.tests.user.test_tasks",
        "description": "flask-oauth2-user-system.oauth_user_system.tests.user.test_tasks",
        "peekOfCode": "class TestTasks(object):\n    def test_deliver_password_reset_email(self, token):\n        \"\"\" Deliver a password reset email. \"\"\"\n        with mail.record_messages() as outbox:\n            user = User.find_by_identity('admin@local.host')\n            deliver_password_reset_email(user.id, token)\n            assert len(outbox) == 1\n            assert token in outbox[0].body",
        "detail": "flask-oauth2-user-system.oauth_user_system.tests.user.test_tasks",
        "documentation": {}
    },
    {
        "label": "TestLogin",
        "kind": 6,
        "importPath": "flask-oauth2-user-system.oauth_user_system.tests.user.test_views",
        "description": "flask-oauth2-user-system.oauth_user_system.tests.user.test_views",
        "peekOfCode": "class TestLogin(ViewTestMixin):\n    def test_login_page(self):\n        \"\"\" Login page renders successfully. \"\"\"\n        response = self.client.get(url_for('user.login'))\n        assert response.status_code == 200\n    def test_login(self):\n        \"\"\" Login successfully. \"\"\"\n        response = self.login()\n        assert response.status_code == 200\n    def test_login_activity(self, users):",
        "detail": "flask-oauth2-user-system.oauth_user_system.tests.user.test_views",
        "documentation": {}
    },
    {
        "label": "TestPasswordReset",
        "kind": 6,
        "importPath": "flask-oauth2-user-system.oauth_user_system.tests.user.test_views",
        "description": "flask-oauth2-user-system.oauth_user_system.tests.user.test_views",
        "peekOfCode": "class TestPasswordReset(ViewTestMixin):\n    def test_begin_password_reset_page(self):\n        \"\"\" Begin password reset renders successfully. \"\"\"\n        response = self.client.get(url_for('user.begin_password_reset'))\n        assert response.status_code == 200\n    def test_password_reset_page(self):\n        \"\"\" Password reset renders successfully. \"\"\"\n        response = self.client.get(url_for('user.password_reset'))\n        assert response.status_code == 200\n    def test_begin_password_reset_as_logged_in(self):",
        "detail": "flask-oauth2-user-system.oauth_user_system.tests.user.test_views",
        "documentation": {}
    },
    {
        "label": "TestSignup",
        "kind": 6,
        "importPath": "flask-oauth2-user-system.oauth_user_system.tests.user.test_views",
        "description": "flask-oauth2-user-system.oauth_user_system.tests.user.test_views",
        "peekOfCode": "class TestSignup(ViewTestMixin):\n    def test_signup_page(self):\n        \"\"\" Signup renders successfully. \"\"\"\n        response = self.client.get(url_for('user.signup'))\n        assert response.status_code == 200\n    def test_welcome_page(self, users):\n        \"\"\" Welcome renders successfully. \"\"\"\n        self.login()\n        response = self.client.get(url_for('user.welcome'))\n        assert response.status_code == 200",
        "detail": "flask-oauth2-user-system.oauth_user_system.tests.user.test_views",
        "documentation": {}
    },
    {
        "label": "TestSettings",
        "kind": 6,
        "importPath": "flask-oauth2-user-system.oauth_user_system.tests.user.test_views",
        "description": "flask-oauth2-user-system.oauth_user_system.tests.user.test_views",
        "peekOfCode": "class TestSettings(ViewTestMixin):\n    def test_settings_page(self):\n        \"\"\" Settings renders successfully. \"\"\"\n        self.login()\n        response = self.client.get(url_for('user.settings'))\n        assert response.status_code == 200\nclass TestUpdateCredentials(ViewTestMixin):\n    def test_update_credentials_page(self):\n        \"\"\" Update credentials renders successfully. \"\"\"\n        self.login()",
        "detail": "flask-oauth2-user-system.oauth_user_system.tests.user.test_views",
        "documentation": {}
    },
    {
        "label": "TestUpdateCredentials",
        "kind": 6,
        "importPath": "flask-oauth2-user-system.oauth_user_system.tests.user.test_views",
        "description": "flask-oauth2-user-system.oauth_user_system.tests.user.test_views",
        "peekOfCode": "class TestUpdateCredentials(ViewTestMixin):\n    def test_update_credentials_page(self):\n        \"\"\" Update credentials renders successfully. \"\"\"\n        self.login()\n        response = self.client.get(url_for('user.update_credentials'))\n        assert response.status_code == 200\n    def test_begin_update_credentials_invalid_current(self):\n        \"\"\" Update credentials failure due to invalid current password. \"\"\"\n        self.login()\n        user = {'current_password': 'nope', 'email': 'admin@local.host'}",
        "detail": "flask-oauth2-user-system.oauth_user_system.tests.user.test_views",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 2,
        "importPath": "flask-oauth2-user-system.oauth_user_system.tests.conftest",
        "description": "flask-oauth2-user-system.oauth_user_system.tests.conftest",
        "peekOfCode": "def app():\n    \"\"\"\n    Setup our flask test app, this only gets executed once.\n    :return: Flask app\n    \"\"\"\n    db_uri = '{0}_test'.format(settings.SQLALCHEMY_DATABASE_URI)\n    params = {\n        'DEBUG': False,\n        'TESTING': True,\n        'WTF_CSRF_ENABLED': False,",
        "detail": "flask-oauth2-user-system.oauth_user_system.tests.conftest",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 2,
        "importPath": "flask-oauth2-user-system.oauth_user_system.tests.conftest",
        "description": "flask-oauth2-user-system.oauth_user_system.tests.conftest",
        "peekOfCode": "def client(app):\n    \"\"\"\n    Setup an app client, this gets executed for each test function.\n    :param app: Pytest fixture\n    :return: Flask app client\n    \"\"\"\n    yield app.test_client()\n@pytest.fixture(scope='session')\ndef db(app):\n    \"\"\"",
        "detail": "flask-oauth2-user-system.oauth_user_system.tests.conftest",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 2,
        "importPath": "flask-oauth2-user-system.oauth_user_system.tests.conftest",
        "description": "flask-oauth2-user-system.oauth_user_system.tests.conftest",
        "peekOfCode": "def db(app):\n    \"\"\"\n    Setup our database, this only gets executed once per session.\n    :param app: Pytest fixture\n    :return: SQLAlchemy database session\n    \"\"\"\n    _db.drop_all()\n    _db.create_all()\n    # Create a single user because a lot of tests do not mutate this user.\n    # It will result in faster tests.",
        "detail": "flask-oauth2-user-system.oauth_user_system.tests.conftest",
        "documentation": {}
    },
    {
        "label": "session",
        "kind": 2,
        "importPath": "flask-oauth2-user-system.oauth_user_system.tests.conftest",
        "description": "flask-oauth2-user-system.oauth_user_system.tests.conftest",
        "peekOfCode": "def session(db):\n    \"\"\"\n    Allow very fast tests by using rollbacks and nested sessions. This does\n    require that your database supports SQL savepoints, and Postgres does.\n    Read more about this at:\n    http://stackoverflow.com/a/26624146\n    :param db: Pytest fixture\n    :return: None\n    \"\"\"\n    db.session.begin_nested()",
        "detail": "flask-oauth2-user-system.oauth_user_system.tests.conftest",
        "documentation": {}
    },
    {
        "label": "token",
        "kind": 2,
        "importPath": "flask-oauth2-user-system.oauth_user_system.tests.conftest",
        "description": "flask-oauth2-user-system.oauth_user_system.tests.conftest",
        "peekOfCode": "def token(db):\n    \"\"\"\n    Serialize a JWS token.\n    :param db: Pytest fixture\n    :return: JWS token\n    \"\"\"\n    user = User.find_by_identity('admin@local.host')\n    return user.serialize_token()\n@pytest.fixture(scope='function')\ndef users(db):",
        "detail": "flask-oauth2-user-system.oauth_user_system.tests.conftest",
        "documentation": {}
    },
    {
        "label": "users",
        "kind": 2,
        "importPath": "flask-oauth2-user-system.oauth_user_system.tests.conftest",
        "description": "flask-oauth2-user-system.oauth_user_system.tests.conftest",
        "peekOfCode": "def users(db):\n    \"\"\"\n    Create user fixtures. They reset per test.\n    :param db: Pytest fixture\n    :return: SQLAlchemy database session\n    \"\"\"\n    db.session.query(User).delete()\n    users = [\n        {\n            'role': 'admin',",
        "detail": "flask-oauth2-user-system.oauth_user_system.tests.conftest",
        "documentation": {}
    },
    {
        "label": "create_celery_app",
        "kind": 2,
        "importPath": "flask-oauth2-user-system.oauth_user_system.app",
        "description": "flask-oauth2-user-system.oauth_user_system.app",
        "peekOfCode": "def create_celery_app(app=None):\n    \"\"\"\n    Create a new Celery object and tie together the Celery config to the app's\n    config. Wrap all tasks in the context of the application.\n    :param app: Flask app\n    :return: Celery app\n    \"\"\"\n    app = app or create_app()\n    celery = Celery(app.import_name, broker=app.config['CELERY_BROKER_URL'],\n                    include=CELERY_TASK_LIST)",
        "detail": "flask-oauth2-user-system.oauth_user_system.app",
        "documentation": {}
    },
    {
        "label": "create_app",
        "kind": 2,
        "importPath": "flask-oauth2-user-system.oauth_user_system.app",
        "description": "flask-oauth2-user-system.oauth_user_system.app",
        "peekOfCode": "def create_app(settings_override=None):\n    \"\"\"\n    Create a Flask application using the app factory pattern.\n    :param settings_override: Override settings\n    :return: Flask app\n    \"\"\"\n    app = Flask(__name__, instance_relative_config=True)\n    app.config.from_object('config.settings')\n    app.config.from_pyfile('settings.py', silent=True)\n    if settings_override:",
        "detail": "flask-oauth2-user-system.oauth_user_system.app",
        "documentation": {}
    },
    {
        "label": "extensions",
        "kind": 2,
        "importPath": "flask-oauth2-user-system.oauth_user_system.app",
        "description": "flask-oauth2-user-system.oauth_user_system.app",
        "peekOfCode": "def extensions(app):\n    \"\"\"\n    Register 0 or more extensions (mutates the app passed in).\n    :param app: Flask application instance\n    :return: None\n    \"\"\"\n    debug_toolbar.init_app(app)\n    mail.init_app(app)\n    csrf.init_app(app)\n    db.init_app(app)",
        "detail": "flask-oauth2-user-system.oauth_user_system.app",
        "documentation": {}
    },
    {
        "label": "authentication",
        "kind": 2,
        "importPath": "flask-oauth2-user-system.oauth_user_system.app",
        "description": "flask-oauth2-user-system.oauth_user_system.app",
        "peekOfCode": "def authentication(app, user_model):\n    \"\"\"\n    Initialize the Flask-Login extension (mutates the app passed in).\n    :param app: Flask application instance\n    :param user_model: Model that contains the authentication information\n    :type user_model: SQLAlchemy model\n    :return: None\n    \"\"\"\n    login_manager.login_view = 'user.login'\n    @login_manager.user_loader",
        "detail": "flask-oauth2-user-system.oauth_user_system.app",
        "documentation": {}
    },
    {
        "label": "CELERY_TASK_LIST",
        "kind": 5,
        "importPath": "flask-oauth2-user-system.oauth_user_system.app",
        "description": "flask-oauth2-user-system.oauth_user_system.app",
        "peekOfCode": "CELERY_TASK_LIST = [\n    'oauth_user_system.blueprints.contact.tasks',\n    'oauth_user_system.blueprints.user.tasks',\n]\ndef create_celery_app(app=None):\n    \"\"\"\n    Create a new Celery object and tie together the Celery config to the app's\n    config. Wrap all tasks in the context of the application.\n    :param app: Flask app\n    :return: Celery app",
        "detail": "flask-oauth2-user-system.oauth_user_system.app",
        "documentation": {}
    },
    {
        "label": "debug_toolbar",
        "kind": 5,
        "importPath": "flask-oauth2-user-system.oauth_user_system.extensions",
        "description": "flask-oauth2-user-system.oauth_user_system.extensions",
        "peekOfCode": "debug_toolbar = DebugToolbarExtension()\nmail = Mail()\ncsrf = CSRFProtect()\ndb = SQLAlchemy()\nlogin_manager = LoginManager()",
        "detail": "flask-oauth2-user-system.oauth_user_system.extensions",
        "documentation": {}
    },
    {
        "label": "mail",
        "kind": 5,
        "importPath": "flask-oauth2-user-system.oauth_user_system.extensions",
        "description": "flask-oauth2-user-system.oauth_user_system.extensions",
        "peekOfCode": "mail = Mail()\ncsrf = CSRFProtect()\ndb = SQLAlchemy()\nlogin_manager = LoginManager()",
        "detail": "flask-oauth2-user-system.oauth_user_system.extensions",
        "documentation": {}
    },
    {
        "label": "csrf",
        "kind": 5,
        "importPath": "flask-oauth2-user-system.oauth_user_system.extensions",
        "description": "flask-oauth2-user-system.oauth_user_system.extensions",
        "peekOfCode": "csrf = CSRFProtect()\ndb = SQLAlchemy()\nlogin_manager = LoginManager()",
        "detail": "flask-oauth2-user-system.oauth_user_system.extensions",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "flask-oauth2-user-system.oauth_user_system.extensions",
        "description": "flask-oauth2-user-system.oauth_user_system.extensions",
        "peekOfCode": "db = SQLAlchemy()\nlogin_manager = LoginManager()",
        "detail": "flask-oauth2-user-system.oauth_user_system.extensions",
        "documentation": {}
    },
    {
        "label": "login_manager",
        "kind": 5,
        "importPath": "flask-oauth2-user-system.oauth_user_system.extensions",
        "description": "flask-oauth2-user-system.oauth_user_system.extensions",
        "peekOfCode": "login_manager = LoginManager()",
        "detail": "flask-oauth2-user-system.oauth_user_system.extensions",
        "documentation": {}
    }
]